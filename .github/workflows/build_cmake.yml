name: Build plugin

on: [push]

env:
  PLUGIN_NAME: Myplugintest
  QT_VERSION: 6.6.3
  MACOS_DEPLOYMENT_TARGET: 11.7
  QT_CREATOR_VERSION: 15.0.0-beta1
  QT_CREATOR_VERSION_INTERNAL: 14.0.82
  CMAKE_VERSION: 3.29.6
  NINJA_VERSION: 1.12.1

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    outputs:
        tag: ${{ steps.git.outputs.tag }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest MSVC", artifact: "Windows-x64",
            os: windows-latest,
            platform: windows_x64,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
          }
        - {
            name: "Ubuntu Latest GCC", artifact: "Linux-x64",
            os: ubuntu-latest,
            platform: linux_x64,
            cc: "gcc", cxx: "g++"
          }
        - {
            name: "macOS Latest Clang", artifact: "macOS-universal",
            os: macos-latest,
            platform: mac_x64,
            cc: "clang", cxx: "clang++"
          }

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Checkout submodules
      id: git
      shell: cmake -P {0}
      run: |
        if (${{github.ref}} MATCHES "tags/v(.*)")
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${CMAKE_MATCH_1}")
        else()
            file(APPEND "$ENV{GITHUB_OUTPUT}" "tag=${{github.run_id}}")
        endif()

    - name: Download Ninja and CMake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ env.CMAKE_VERSION }}
        ninjaVersion: ${{ env.NINJA_VERSION }}

    - name: Add CMake to PATH
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

    # - name: Download Ninja and CMake
    #   shell: cmake -P {0}
    #   run: |
    #     set(cmake_version "$ENV{CMAKE_VERSION}")
    #     set(ninja_version "$ENV{NINJA_VERSION}")

    #     if ("${{ runner.os }}" STREQUAL "Windows")
    #       set(ninja_suffix "win.zip")
    #       set(cmake_suffix "windows-x86_64.zip")
    #       set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
    #     elseif ("${{ runner.os }}" STREQUAL "Linux")
    #       set(ninja_suffix "linux.zip")
    #       set(cmake_suffix "linux-x86_64.tar.gz")
    #       set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
    #     elseif ("${{ runner.os }}" STREQUAL "macOS")
    #       set(ninja_suffix "mac.zip")
    #       set(cmake_suffix "macos-universal.tar.gz")
    #       set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
    #     endif()

    #     set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
    #     file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
    #     execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

    #     set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
    #     file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
    #     execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

    #     # Add to PATH environment variable
    #     file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
    #     set(path_separator ":")
    #     if ("${{ runner.os }}" STREQUAL "Windows")
    #       set(path_separator ";")
    #     endif()
    #     file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

    #     if (NOT "${{ runner.os }}" STREQUAL "Windows")
    #       execute_process(
    #         COMMAND chmod +x ninja
    #         COMMAND chmod +x ${cmake_dir}/cmake
    #       )
    #     endif()

    - name: Install system libs
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt update
          )
          execute_process(
            COMMAND sudo apt install libgl1-mesa-dev
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Failed to install dependencies")
          endif()
        endif()

    - name: Download Qt
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version "$ENV{QT_VERSION}")

        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          set(qt_package_arch_suffix "win64_msvc2019_64")
          set(qt_dir_prefix "${qt_version}/msvc2019_64")
          set(qt_package_suffix "-Windows-Windows_10_22H2-MSVC2019-Windows-Windows_10_22H2-X86_64")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          if (qt_version VERSION_LESS "6.7.0")
            set(qt_package_arch_suffix "gcc_64")
          else()
            set(qt_package_arch_suffix "linux_gcc_64")
          endif()
          set(qt_dir_prefix "${qt_version}/gcc_64")
          set(qt_package_suffix "-Linux-RHEL_8_8-GCC-Linux-RHEL_8_8-X86_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(qt_package_arch_suffix "clang_64")
          set(qt_dir_prefix "${qt_version}/macos")
          set(qt_package_suffix "-MacOS-MacOS_13-Clang-MacOS-MacOS_13-X86_64-ARM64")
        endif()

        set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}")
        file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)

        file(READ ./Updates.xml updates_xml)
        string(REGEX MATCH "<Name>qt.qt6.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
        set(qt_package_version ${CMAKE_MATCH_1})

        file(MAKE_DIRECTORY qt6)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt6/${qt_dir_prefix}" qt_dir)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "qt_dir=${qt_dir}")

        message("Downloading Qt to ${qt_dir}")
        function(downloadAndExtract url archive)
          message("Downloading ${url}")
          file(DOWNLOAD "${url}" ./${archive} SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${archive} WORKING_DIRECTORY qt6)
        endfunction()

        foreach(package qtbase qtdeclarative)
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
            ${package}.7z
          )
        endforeach()

        foreach(package qt5compat qtshadertools)
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
            ${package}.7z
          )
        endforeach()

        # uic depends on libicu*.so
        if ("${{ runner.os }}" STREQUAL "Linux")
          if (qt_version VERSION_LESS "6.7.0")
            set(uic_suffix "Rhel7.2-x64")
          else()
            set(uic_suffix "Rhel8.6-x86_64")
          endif()
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}icu-linux-${uic_suffix}.7z"
            icu.7z
          )
        endif()

        #   run: node .github/scripts/downloadQtC.js ${{ env.QT_CREATOR_VERSION }} ${{ matrix.config.platform }}

    - name: Download Qt Creator
      uses: Maddimax/install-qtc@v1
      with:
        version: 14.0.0
        unzip-to: 'qtcreator'

    - name: Extract Qt Creator
      id: qt_creator
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qtcreator" qtc_dir)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "qtc_dir=${qtc_dir}")

    - name: Build
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        set(ENV{MACOSX_DEPLOYMENT_TARGET} "${{ env.MACOS_DEPLOYMENT_TARGET }}")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
        if ("${{ runner.os }}" STREQUAL "macOS")
            set(ENV{CMAKE_OSX_ARCHITECTURES} "x86_64;arm64")
        endif()

        set(build_plugin_py "scripts/build_plugin.py")
        foreach(dir "share/qtcreator/scripts" "Qt Creator.app/Contents/Resources/scripts" "Contents/Resources/scripts")
          if(EXISTS "${{ steps.qt_creator.outputs.qtc_dir }}/${dir}/build_plugin.py")
            set(build_plugin_py "${dir}/build_plugin.py")
            break()
          endif()
        endforeach()

        execute_process(
          COMMAND python
            -u
            "${{ steps.qt_creator.outputs.qtc_dir }}/${build_plugin_py}"
            --name "$ENV{PLUGIN_NAME}-$ENV{QT_CREATOR_VERSION}-${{ matrix.config.artifact }}"
            --src .
            --build build
            --qt-path "${{ steps.qt.outputs.qt_dir }}"
            --qtc-path "${{ steps.qt_creator.outputs.qtc_dir }}"
            --output-path "$ENV{GITHUB_WORKSPACE}"
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          string(REGEX MATCH "FAILED:.*$" error_message "${output}")
          string(REPLACE "\n" "%0A" error_message "${error_message}")
          message("::error::${error_message}")
          message(FATAL_ERROR "Build failed")
        endif()

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        path: ./${{ env.PLUGIN_NAME }}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}.7z
        name: ${{ env.PLUGIN_NAME}}-${{ env.QT_CREATOR_VERSION }}-${{ matrix.config.artifact }}.7z

    - name: Upload plugin json
      uses: actions/upload-artifact@v4
      with:
        path: ./build/build/${{ env.PLUGIN_NAME }}.json
        name: ${{ env.PLUGIN_NAME }}-${{ matrix.config.artifact }}.json

  # check_json:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: check build json
  #       run: |
  #         ls -ll build/build

  update_json:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Download the JSON file
      uses: actions/download-artifact@v4
      with:
        # same for all platforms for now
        name: ${{ env.PLUGIN_NAME }}-Linux-x64.json 

    - name: Store Release upload_url
      run: |
        RELEASE_HTML_URL=$(echo "${{github.event.repository.html_url}}/releases/download/v${{ needs.build.outputs.tag }}")
        echo "RELEASE_HTML_URL=${RELEASE_HTML_URL}" >> $GITHUB_ENV

    - name: Run the Node.js script to update JSON
      env:
        QT_TOKEN: ${{ secrets.TOKEN }}
      run: node .github/scripts/registerPlugin.js ${{ env.RELEASE_HTML_URL }} ${{ env.PLUGIN_NAME }} ${{ env.QT_CREATOR_VERSION }} ${{ env.QT_CREATOR_VERSION_INTERNAL }} ${{ env.QT_TOKEN }}

    - name: Upload the modified JSON file as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: plugin-json
        path: .github/scripts/${{ env.PLUGIN_NAME }}.json

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: [build, update_json] 

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-with-dirs

    - name: Fixup artifacts
      run: |
        mkdir release
        mv release-with-dirs/*/* release/

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.tag }}
        files: release/*
        draft: false
        prerelease: false
